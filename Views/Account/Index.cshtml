@using Microsoft.AspNetCore.Identity
@using ReviewApp.Services;
@inject ReviewService reviewService;
@inject AccountService accountService;
@inject UserManager<UserEntity> userManager;
@{
    //Default is logged in user
    var userId = User.FindFirst("Id").Value;

    //Users own page
    bool myAccount = true;

    if (ViewData["UserId"].ToString() != Guid.Empty.ToString())
    {
        userId = ViewData["UserId"].ToString();
        //if user is on its own page
        if (userId != User.FindFirst("Id").Value)
        {
            myAccount = false;
        }
    }

    var user = userManager.Users.First(x => x.Id == userId);

    var reviews = await reviewService.GetUserReviewsAsync(userId);

    //follows
    var follows = await accountService.GetUserFollowsAsync(userId);
    //followers
    var followers = await accountService.GetUserFollowersAsync(userId);
}

<h1>@user.UserName</h1>

<div>Följer:</div>
@foreach(var follow in follows)
{
    <div>@follow.UserName</div>
}

<div>Följare:</div>
@foreach (var follow in followers)
{
    <div>@follow.UserName</div>
}

@if (!myAccount)
{
    if (await accountService.UserIsFollowingUserAsync(User.FindFirst("Id").Value, userId))
    {
        <a asp-action="UnfollowUser" asp-controller="Account" asp-route-followerId="@User.FindFirst("Id").Value" asp-route-followeeId="@user.Id">Sluta följa</a>
    }
    else
    {
        <a asp-action="FollowUser" asp-controller="Account" asp-route-followerId="@User.FindFirst("Id").Value" asp-route-followeeId="@user.Id">Följ</a>
    }
}


<div>Recensioner:</div>

<div>
    @foreach (var review in reviews)
    {
        <div class="border">
            <h2>@review.Rating</h2>
            <p>@review.Comment</p>
        </div>
    }
</div>


